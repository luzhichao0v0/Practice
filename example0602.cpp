#include <stdio.h>

/*
==>
	指针常量:指针类型的常量(指针自身的值是一个常量,即指向的地址不能被改变,但指向的地址的内容可以被改变),保护地址不变
		地址不可变,地址指向的值可变(p不可变,*p可变)
			定义方式:*在前,const在后(指针常量)
				类型* const 变量名
				
	常量指针:指向常量的指针(指针指向的内容是不能改变的),保护地址的值不变
		地址可变,地址指向的值不可变(p可变,*p不可变)
			定义方式:const在前,*在后(常量指针)
				类型 const* 变量名;
				const 类型* 变量名;
<==
*/
void example0602()
{
	printf("=====example0602()=====\n");

	int i = 9;
	int j = 65;
	int k = 97;

	//指针常量(指针类型的常量)
	
	//指针常量:类型* const 变量名;
	int* const p1 = &i;
	//该定义方法错误(应输入标识符),不符合*在前,const在后
	//const* int p2 = &i;
	//指针常量必须在定义时赋值(未初始化本地变量)
	//int* const p3;

	//指针常量不可以修改指针地址(表达式左边必须是可修改的左值,下方的指针是常量,不可修改,所以表达式出错)
	//p1 = p1 + 1;
	//p1 = 0;

	//常量指针(指向常量的指针)
	
	//常量指针的第一种定义方法:类型 const* 变量名;
	int const* p4 = &i;
	//常量指针的第二种定义方法:const 类型* 变量名;
	const int* p5 = &i;

	//i=9,&i=000000CA674FF144,j=65,&j=000000CA674FF164,k=97,&k=000000CA674FF184
	printf("i=%d,&i=%p,j=%d,&j=%p,k=%d,&k=%p\n", i, &i, j, &j, k, &k);
	
	//*p1=9,*p4=9,*p5=9
	printf("*p1=%d,*p4=%d,*p5=%d\n", *p1, *p4, *p5);
	//p1=000000CA674FF144,p4=000000CA674FF144,p5=000000CA674FF144
	printf("p1=%p,p4=%p,p5=%p\n", p1, p4, p5);

	//p1为指针常量,指针内容(地址)不能被改变;p4和p5是常量指针,指针内容(地址)可以被改变
	//p1 = &j;
	p4 = &j;
	p5 = &j;

	//*p1=9,*p4=65,*p5=65
	printf("*p1=%d,*p4=%d,*p5=%d\n", *p1, *p4, *p5);
	//p1=000000CA674FF144,p4=000000CA674FF164,p5=000000CA674FF164
	printf("p1=%p,p4=%p,p5=%p\n", p1, p4, p5);

	//p1为指针常量,指针内容的值(地址的值)可以被改变;p4和p5是常量指针,指针内容的值(地址的值)不可以被改变
	*p1 = k;
	//*p4 = k;
	//*p5 = 0;

	//*p1=97,*p4=65,*p5=65
	printf("*p1=%d,*p4=%d,*p5=%d\n", *p1, *p4, *p5);
	//p1=000000CA674FF144,p4=000000CA674FF164,p5=000000CA674FF164
	printf("p1=%p,p4=%p,p5=%p\n", p1, p4, p5);

	//i=97,&i=000000CA674FF144,j=65,&j=000000CA674FF164,k=97,&k=000000CA674FF184
	printf("i=%d,&i=%p,j=%d,&j=%p,k=%d,&k=%p\n", i, &i, j, &j, k, &k);
}